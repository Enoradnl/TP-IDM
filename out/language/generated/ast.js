/******************************************************************************
 * This file was generated by langium-cli 2.0.1.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import { AbstractAstReflection } from 'langium';
export const RoboMlTerminals = {
    ID: /(\^?(([a-z]|[A-Z])|_)((([a-z]|[A-Z])|_)|[0-9])*)/,
    INT: /[0-9]+/,
    STRING: /(("((\\([\s\S]))|((?!(\\|"))[\s\S]*?))*")|('((\\([\s\S]))|((?!(\\|'))[\s\S]*?))*'))/,
    ML_COMMENT: /(\/\*([\s\S]*?\*\/))/,
    SL_COMMENT: /(\/\/((?!(\n|\r))[\s\S]*?)(\r?\n)?)/,
    WS: /((( |	)|\r)|\n)+/,
};
export function isEBoolean(item) {
    return typeof item === 'boolean';
}
export function isEString(item) {
    return (typeof item === 'string' && (/(("((\\([\s\S]))|((?!(\\|"))[\s\S]*?))*")|('((\\([\s\S]))|((?!(\\|'))[\s\S]*?))*'))/.test(item) || /(\^?(([a-z]|[A-Z])|_)((([a-z]|[A-Z])|_)|[0-9])*)/.test(item)));
}
export const Exp1 = 'Exp1';
export function isExp1(item) {
    return reflection.isInstance(item, Exp1);
}
export const Exp2 = 'Exp2';
export function isExp2(item) {
    return reflection.isInstance(item, Exp2);
}
export const Exp3 = 'Exp3';
export function isExp3(item) {
    return reflection.isInstance(item, Exp3);
}
export const Exp4 = 'Exp4';
export function isExp4(item) {
    return reflection.isInstance(item, Exp4);
}
export const Exp5 = 'Exp5';
export function isExp5(item) {
    return reflection.isInstance(item, Exp5);
}
export const Primaire = 'Primaire';
export function isPrimaire(item) {
    return reflection.isInstance(item, Primaire);
}
export const ArithmeticValue = 'ArithmeticValue';
export function isArithmeticValue(item) {
    return reflection.isInstance(item, ArithmeticValue);
}
export const BooleanValue = 'BooleanValue';
export function isBooleanValue(item) {
    return reflection.isInstance(item, BooleanValue);
}
export const Expression = 'Expression';
export function isExpression(item) {
    return reflection.isInstance(item, Expression);
}
export const Fonction = 'Fonction';
export function isFonction(item) {
    return reflection.isInstance(item, Fonction);
}
export const Param = 'Param';
export function isParam(item) {
    return reflection.isInstance(item, Param);
}
export const RoboML = 'RoboML';
export function isRoboML(item) {
    return reflection.isInstance(item, RoboML);
}
export const Speed = 'Speed';
export function isSpeed(item) {
    return reflection.isInstance(item, Speed);
}
export const Statement = 'Statement';
export function isStatement(item) {
    return reflection.isInstance(item, Statement);
}
export const VariableRef = 'VariableRef';
export function isVariableRef(item) {
    return reflection.isInstance(item, VariableRef);
}
export const ArithmeticExpression = 'ArithmeticExpression';
export function isArithmeticExpression(item) {
    return reflection.isInstance(item, ArithmeticExpression);
}
export const BooleanExpression = 'BooleanExpression';
export function isBooleanExpression(item) {
    return reflection.isInstance(item, BooleanExpression);
}
export const Value = 'Value';
export function isValue(item) {
    return reflection.isInstance(item, Value);
}
export const Assignment = 'Assignment';
export function isAssignment(item) {
    return reflection.isInstance(item, Assignment);
}
export const Condition = 'Condition';
export function isCondition(item) {
    return reflection.isInstance(item, Condition);
}
export const FunctionCall = 'FunctionCall';
export function isFunctionCall(item) {
    return reflection.isInstance(item, FunctionCall);
}
export const Loop = 'Loop';
export function isLoop(item) {
    return reflection.isInstance(item, Loop);
}
export const Movement = 'Movement';
export function isMovement(item) {
    return reflection.isInstance(item, Movement);
}
export const ReturnInstruction = 'ReturnInstruction';
export function isReturnInstruction(item) {
    return reflection.isInstance(item, ReturnInstruction);
}
export const Rotation = 'Rotation';
export function isRotation(item) {
    return reflection.isInstance(item, Rotation);
}
export const Sensors = 'Sensors';
export function isSensors(item) {
    return reflection.isInstance(item, Sensors);
}
export const Variable = 'Variable';
export function isVariable(item) {
    return reflection.isInstance(item, Variable);
}
export class RoboMlAstReflection extends AbstractAstReflection {
    getAllTypes() {
        return ['ArithmeticExpression', 'ArithmeticValue', 'Assignment', 'BooleanExpression', 'BooleanValue', 'Condition', 'Exp1', 'Exp2', 'Exp3', 'Exp4', 'Exp5', 'Expression', 'Fonction', 'FunctionCall', 'Loop', 'Movement', 'Param', 'Primaire', 'ReturnInstruction', 'RoboML', 'Rotation', 'Sensors', 'Speed', 'Statement', 'Value', 'Variable', 'VariableRef'];
    }
    computeIsSubtype(subtype, supertype) {
        switch (subtype) {
            case ArithmeticExpression:
            case BooleanExpression: {
                return this.isSubtype(Expression, supertype);
            }
            case Assignment:
            case Condition:
            case FunctionCall:
            case Loop:
            case Movement:
            case ReturnInstruction:
            case Rotation:
            case Sensors:
            case Variable: {
                return this.isSubtype(Statement, supertype);
            }
            case Exp2: {
                return this.isSubtype(Exp1, supertype);
            }
            case Exp3: {
                return this.isSubtype(Exp2, supertype);
            }
            case Exp4: {
                return this.isSubtype(Exp3, supertype);
            }
            case Exp5: {
                return this.isSubtype(Exp4, supertype);
            }
            case Expression: {
                return this.isSubtype(Primaire, supertype);
            }
            case Primaire: {
                return this.isSubtype(Exp5, supertype);
            }
            case Value: {
                return this.isSubtype(Expression, supertype) || this.isSubtype(Primaire, supertype);
            }
            default: {
                return false;
            }
        }
    }
    getReferenceType(refInfo) {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }
    getTypeMetaData(type) {
        switch (type) {
            case 'Fonction': {
                return {
                    name: 'Fonction',
                    mandatory: [
                        { name: 'param', type: 'array' },
                        { name: 'statement', type: 'array' }
                    ]
                };
            }
            case 'Param': {
                return {
                    name: 'Param',
                    mandatory: [
                        { name: 'expression', type: 'array' }
                    ]
                };
            }
            case 'RoboML': {
                return {
                    name: 'RoboML',
                    mandatory: [
                        { name: 'function', type: 'array' },
                        { name: 'variable', type: 'array' }
                    ]
                };
            }
            case 'Speed': {
                return {
                    name: 'Speed',
                    mandatory: [
                        { name: 'arithmeticexpression', type: 'array' }
                    ]
                };
            }
            case 'Condition': {
                return {
                    name: 'Condition',
                    mandatory: [
                        { name: 'statement', type: 'array' }
                    ]
                };
            }
            case 'FunctionCall': {
                return {
                    name: 'FunctionCall',
                    mandatory: [
                        { name: 'arguments', type: 'array' }
                    ]
                };
            }
            case 'Loop': {
                return {
                    name: 'Loop',
                    mandatory: [
                        { name: 'statement', type: 'array' }
                    ]
                };
            }
            case 'ReturnInstruction': {
                return {
                    name: 'ReturnInstruction',
                    mandatory: [
                        { name: 'expression', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}
export const reflection = new RoboMlAstReflection();
//# sourceMappingURL=ast.js.map